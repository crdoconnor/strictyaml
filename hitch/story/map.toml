["Mappings with defined keys (Map)"]
    docs = "compound/mapping"
    "based on" = "strictyaml"
    description = """
Mappings of one value to another are represented by : in YAML \
and parsed as python dicts.

Using StrictYAML's 'Map' you can validate that a mapping \
contains the right keys and the right *type* of values.

Note: for mappings where you don't know the exact names of \
the keys in advance but you do know the type, use MapPattern."""

    given.setup = """
from collections import OrderedDict
from strictyaml import Map, Int, load, as_document
from collections import OrderedDict
from ensure import Ensure

schema = Map({"a": Int(), "b": Int(), "c": Int()})

schema_2 = Map({u"â": Int(), "b": Int(), "c": Int()})"""
    given.yaml_snippet = "â: 1\nb: 2\nc: 3"

["Mappings with defined keys (Map)".variations."one key mapping"]
    given.yaml_snippet = "x: 1"
    [["Mappings with defined keys (Map)".variations."one key mapping".steps]]
        Run = """Ensure(load(yaml_snippet, Map({"x": Int()})).data).equals(OrderedDict([('x', 1)]))"""

[["Mappings with defined keys (Map)".variations."key value".steps]]
    Run = "Ensure(load(yaml_snippet, schema_2)[u'â']).equals(1)"

[["Mappings with defined keys (Map)".variations."get item key not found".steps]]
    Run.code = "load(yaml_snippet, schema_2)['keynotfound']"
    Run.raises.message = "'keynotfound'"

[["Mappings with defined keys (Map)".variations."cannot use .text".steps]]
    Run.code = "load(yaml_snippet, schema_2).text"
    ["Mappings with defined keys (Map)".variations."cannot use .text".steps.Run.raises.type]
        "in python 3" = "builtins.TypeError"
        "in python 2" = "exceptions.TypeError"
    ["Mappings with defined keys (Map)".variations."cannot use .text".steps.Run.raises.message]
        "in python 3" = "YAML(OrderedDict([('â', 1), ('b', 2), ('c', 3)])) is a mapping, has no text value."
        "in python 2" = "YAML(OrderedDict([(u'\\xe2', 1), ('b', 2), ('c', 3)])) is a mapping, has no text value."

["Mappings with defined keys (Map)".variations."parse snippet where key is not found in schema"]
    given.yaml_snippet = "a: 1\nb: 2\nâ: 3"
    [["Mappings with defined keys (Map)".variations."parse snippet where key is not found in schema".steps]]
        Run.code = "load(yaml_snippet, schema)"
        Run.raises.type = "strictyaml.exceptions.YAMLValidationError"
        Run.raises.message = """
while parsing a mapping
unexpected key not in schema 'â'
  in "<unicode string>", line 3, column 1:
    "\\xE2": '3'
    ^ (line: 3)"""

["Mappings with defined keys (Map)".variations."sequence not expected when parsing"]
    given.yaml_snippet = "- 1\n- 2\n- 3"
    [["Mappings with defined keys (Map)".variations."sequence not expected when parsing".steps]]
        Run.code = "load(yaml_snippet, schema)"
        Run.raises.type = "strictyaml.exceptions.YAMLValidationError"
        Run.raises.message = """
when expecting a mapping
  in "<unicode string>", line 1, column 1:
    - '1'
     ^ (line: 1)
found a sequence
  in "<unicode string>", line 3, column 1:
    - '3'
    ^ (line: 3)"""

[["Mappings with defined keys (Map)".variations."List not expected when serializing".steps]]
    Run.code = "as_document([1, 2, 3], schema)"
    Run.raises.type = "strictyaml.exceptions.YAMLSerializationError"
    Run.raises.message = "Expected a dict, found '[1, 2, 3]'"

[["Mappings with defined keys (Map)".variations."Empty dict not valid when serializing".steps]]
    Run.code = "as_document({}, schema)"
    Run.raises.type = "strictyaml.exceptions.YAMLSerializationError"
    Run.raises.message = """
Expected a non-empty dict, found an empty dict.
Use EmptyDict validator to serialize empty dicts."""

["Mappings with defined keys (Map)".variations."Unexpected key"]
    given.yaml_snippet = "a: 1\nb: 2\nc: 3\nd: 4"
    [["Mappings with defined keys (Map)".variations."Unexpected key".steps]]
        Run.code = "load(yaml_snippet, schema)"
        Run.raises.type = "strictyaml.exceptions.YAMLValidationError"
        Run.raises.message = """
while parsing a mapping
unexpected key not in schema 'd'
  in "<unicode string>", line 4, column 1:
    d: '4'
    ^ (line: 4)"""

["Mappings with defined keys (Map)".variations."required key not found"]
    given.yaml_snippet = "a: 1"
    [["Mappings with defined keys (Map)".variations."required key not found".steps]]
        Run.code = "load(yaml_snippet, schema)"
        Run.raises.type = "strictyaml.exceptions.YAMLValidationError"
        Run.raises.message = """
while parsing a mapping
required key(s) 'b', 'c' not found
  in "<unicode string>", line 1, column 1:
    a: '1'
     ^ (line: 1)"""

["Mappings with defined keys (Map)".variations.iterator]
    given.yaml_snippet = "a: 1\nb: 2\nc: 3"
    [["Mappings with defined keys (Map)".variations.iterator.steps]]
        Run = """assert [item for item in load(yaml_snippet, schema)] == ["a", "b", "c"]"""

[["Mappings with defined keys (Map)".variations.serialize.steps]]
    Run = """assert as_document(OrderedDict([(u"â", 1), ("b", 2), ("c", 3)]), schema_2).as_yaml() == yaml_snippet"""
